#include <iostream>
using namespace std;

/**********************************************************
 * 封装、继承、多态
 * 1.属性|行为 (权限控制)
 * 2.构造   拷贝构造函数
 * 3.析构
 * 4.友元
***********************************************************/

/***************************************************
 * cpp中的成员变量和成员函数分开存储
 * 静态成员变量不属于类对象上的，只有非静态成员变量属于
 * 每个非静态成员函数只有一份实例，通过this指针
***************************************************/
class Student 
{
    // 类内可以访问，类外也可以访问
    public:
        // 构造函数
        Student(string name,int id):mName(name),mId(id){}
        // 析构函数
        ~Student();

        void showStudent();
    
    // 类内可以访问，类外不能访问，继承中体现出protected
    protected:  
    // 类内可以访问，类外不能访问
    private:
        string mName;
        int    mId;
};

void Student::showStudent()
{

}
/************************************************************
 * 构造和析构，不写时编译类型默认产生一个空的函数体
 * 构造和析构没有函数返回值，也没有void
 * 构造函数可以有参数，因此可以重载
 * 析构不能有参数
---------------------------------------------------------
 * 1.默认构造函数调用时不要加(),此时编译器会认为是一个函数声明
 * 2.匿名对象 Person(10) 运行后会立即回收
**************************************************************/

/***********************************************
 * 拷贝构造函数，即对自定义类型的参数进行初始化
 * 参数类型为 Person(const Person &p)
-----------------------------------------------
 * 1.通过已有的类型参数拷贝到新类型中
 * 2.参数进行值传递的时候调用拷贝构造函数
 * 3.返回值传递方式调用拷贝构造函数
***********************************************/

/************************************************
 * 三种构造函数的调用规则
 * 1.提供拷贝构造函数，则系统不会再提供其他两种
 * 2.提供有参构造，则系统不会再提供默认
************************************************/

/**************************************************************
 * 浅拷贝：简单的赋值拷贝操作，带来堆区内存重复释放
 * 深拷贝：在堆区重新申请空间，进行拷贝操作
 * 在堆区开辟到的内存，通过浅拷贝而两个对象指向了同一个堆区
 * 因此释放时会重复释放，故设置拷贝构造函数，开辟一个新空间去接收
**************************************************************/

/******************************************
 * 嵌套的类对象的构造和析构顺序
 * 1. 外类依赖嵌套类，因此构造是从里到外
 * 2. 析构则与之相反
*******************************************/

/*********************************************************************
 * static 静态成员与成员函数
 * 所有对象共享同一份内存
 * 1.成员函数可以通过对象、也可以通过类名访问，也有访问权限限制
     只能访问静态成员变量，而不能访问非静态
 * 2.成员变量在类内声明，类外初始化
**********************************************************************/

/**********************************************
 * const 成员函数 ->  常函数
 * 不能修改成员属性，但可以加mutable修改
 * const 成员对象  -> 常对象
 * 常对象只能调用常函数
**********************************************/