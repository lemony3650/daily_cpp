#include <iostream>
#include <string>
using namespace std;


void MyPrint(int arr[],int len);
/*****************************************************
 * 数组
 * int arr[] = {}; 
 * sizeof(arr) 代表整个数组占用内存
 * cout << arr ||  &arr[0]可以直接输出数组首地址
 * 数组元素逆序  1.首尾互换 2.新数组赋值
*****************************************************/
void test01()
{
    int arr[6] = {1,2,3,4,5,6};
    int count = sizeof(arr)/sizeof(arr[0]);
    int tt = count-1;

    for(int i = 0; i < count/2; i++) {
        int tmp = arr[i];
        arr[i] = arr[tt];
        arr[tt] = tmp;
        tt--;
    }

    MyPrint(arr,count);
}

/*****************************************************
 * 冒泡排序，相当于一个数一个数的向最后冒
 * 外层循环 = 总的元素个数-1   针对具体每个元素
 * 内层循环 = 外层循环-外层循环次序     针对每个元素比较
 * 采用升序，因此比较前者>后者进行交换
******************************************************/
int arr[] = {4,2,8,0,5,7,1,3,9}; 
int count = sizeof(arr)/sizeof(arr[0]);

void bubbleSort(int *arr, int len)
{
    for (int i = 0; i < len-1; i++) {
        for(int j = 0; j < len-1-i; j++) {
            if( arr[j] > arr[j+1]) {
             int tmp = arr[j];
             arr[j] = arr[j+1];
             arr[j+1] = tmp;
            }
         }
    }
    MyPrint(arr,count);
}
/**********************************************
 * 选择排序
 * 默认外圈的每个数为最大
 * 每次用外圈值与内圈比较找出一个最大的值
 * 外圈与内圈最大交换位置
**********************************************/
void MySort(int *arr, int len)
{
    for (int i = 0; i < len; i++) {
        int max = i;
        for(int j = i+1; j < len; j++) {
            if( arr[max] < arr[j])
                max = j;
         }
         if(max != i) {
            int tmp = arr[i];
            arr[i] = arr[max];
            arr[max] = tmp;
         }
    }
    MyPrint(arr,count);
}

/*********************************************
 * 二维数组
 * sizeof(arr)
 * sizeof(arr)/sizeof(a[0])
 * sizeof(arr[0])/sizeof(a[0][0])
 * sizeof(arr)/sizeof(a[0][0])
*********************************************/

/**************************************
 * 空指针即指向内存地址为0的地址
 * 而0-255是系统占用无法访问的
 * 空指针用于初始化操作,不能对空指针赋值
***************************************/
int *p = NULL;

/***********************************
 * 野指针
 * 指针变量指向非法的内存空间
 * 访问时会报错
************************************/

/******************************
 * 常量指针 const int *p
 * 指针常量 int * const p
 * const int * const p
*******************************/

/******************************************
 * 1.数组访问
 * 2.函数形参传递地址修改变量值
*******************************************/

/*************************************
 * 结构体指针传参，防止更改添加const
 * void fun_c(const struct type*stu)
*************************************/




/*********************************
 * 打印数组
*********************************/
void MyPrint(int arr[],int len)
{
    for(int j = 0; j < len;j++)
      cout << arr[j] << "  ";
    cout << endl;
}
