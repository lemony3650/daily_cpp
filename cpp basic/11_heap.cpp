#include <iostream>
using namespace std;

#include <memory>

/**************************************
 * 直接管理内存
 * new | delete
 * 返回指向对象的指针
 * delete只能释放new分配的指针
*************************************/
void test01()
{
    int *p = new int;           // 默认初始化

    int *p1 = new int(10);
    int *p2 = new int();        // 值初始化 为0

    // 如果分配失败返回空指针，不抛出异常
    int *m = new (nothrow) int;

    delete p;
    p = nullptr;
}

/**********************************************
 * 智能指针  #include <memory>
 * 模板类，内部实现计数器，自动释放内存 调用析构函数
 * shared_ptr 允许多个指针指向同一个对象
 * unique_ptr   独占指向的对象
 * weak_ptr
-----------------------------------------------
 * 1.内存泄漏 没有及时释放内存
 * 2.非法访问 错误释放内存
***********************************************/


/**********************************************
 * 模板类，需要指定指针指向的类型
 * shared_ptr 独有的操作
    1. make_shared<T>(args) 返回智能指针
    2. shared_ptr<T>p(q)
***********************************************/
void test02()
{
    // 通过make_shared方式创建对象，返回智能指针
    shared_ptr<int> p = make_shared<int>(10);

    // 或者通过auto
    auto p2 = make_shared<int>(10);

    // 结合使用时需要直接初始化
    shared_ptr<int> p2(new int(10));

    cout << *p << endl;

}

/**************************************************
 * shared_ptr
 * 内部有一个引用计数器，当为0时自动释放内存对象
 * 当将智能指针放到一个容器中，待不需要时需要删除erase
***************************************************/